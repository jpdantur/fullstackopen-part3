{"version":3,"sources":["components/Person.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Person","id","name","number","handleDelete","onClick","Notification","status","message","className","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Filter","searchTerm","onChange","value","PersonForm","onNameChange","onNumberChange","onSubmit","type","Persons","persons","map","person","key","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setSearchTerm","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personService","returnedPersons","event","target","preventDefault","existingPerson","find","undefined","returnedPerson","concat","setTimeout","window","confirm","updatedPerson","catch","error","filter","toLowerCase","includes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e295963c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Person = ({ id, name, number, handleDelete }) => {\n  return (\n    <div>\n      {name} {number} <button onClick={handleDelete(id, name)}>delete</button>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from \"react\";\nconst Notification = ({ status, message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={status}>{message}</div>;\n};\n\nexport default Notification;\n","import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst get = (id) => {\n  const request = axios.get(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nexport default { get, getAll, create, update, remove };\n","import React, { useState, useEffect } from \"react\";\nimport Person from \"./components/Person\";\nimport Notification from \"./components/Notification\";\nimport personService from \"./services/persons\";\n\nconst Filter = ({ searchTerm, onChange }) => (\n  <div>\n    filter shown with\n    <input value={searchTerm} onChange={onChange} />\n  </div>\n);\n\nconst PersonForm = ({\n  name,\n  number,\n  onNameChange,\n  onNumberChange,\n  onSubmit,\n}) => (\n  <form onSubmit={onSubmit}>\n    <div>\n      name: <input value={name} onChange={onNameChange} />\n    </div>\n    <div>\n      number: <input value={number} onChange={onNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n);\n\nconst Persons = ({ persons, handleDelete }) => (\n  <div>\n    {persons.map((person) => (\n      <Person\n        key={person.id}\n        id={person.id}\n        name={person.name}\n        number={person.number}\n        handleDelete={handleDelete}\n      />\n    ))}\n  </div>\n);\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then((returnedPersons) => setPersons(returnedPersons));\n  }, []);\n\n  const handleSearchTermChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n  const handleDelete = (id, name) => () => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService.remove(id).then(() => {\n        setPersons(persons.filter((person) => person.id !== id));\n        setSuccessMessage(`Deleted ${name}`);\n        setTimeout(() => {\n          setSuccessMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  const handleAddPerson = (event) => {\n    event.preventDefault();\n    const existingPerson = persons.find((person) => person.name === newName);\n    if (existingPerson === undefined) {\n      personService\n        .create({ name: newName, number: newNumber })\n        .then((returnedPerson) => {\n          setPersons(\n            persons.concat({\n              name: returnedPerson.name,\n              number: returnedPerson.number,\n              id: returnedPerson.id,\n            })\n          );\n          setNewName(\"\");\n          setNewNumber(\"\");\n          setSuccessMessage(`Added ${returnedPerson.name}`);\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 5000);\n        });\n    } else {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        personService\n          .update(existingPerson.id, {\n            id: existingPerson.id,\n            name: existingPerson.name,\n            number: newNumber,\n          })\n          .then((updatedPerson) => {\n            setNewName(\"\");\n            setNewNumber(\"\");\n            setPersons(\n              persons.map((person) => ({\n                id: person.id,\n                name: person.name,\n                number:\n                  person.id === updatedPerson.id\n                    ? updatedPerson.number\n                    : person.number,\n              }))\n            );\n            setSuccessMessage(`Updated ${updatedPerson.name}`);\n            setTimeout(() => {\n              setSuccessMessage(null);\n            }, 5000);\n          })\n          .catch((error) => {\n            setNewName(\"\");\n            setNewNumber(\"\");\n            setErrorMessage(\n              `Information of ${newName} has already been removed from server`\n            );\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n          });\n      }\n    }\n  };\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification status=\"error\" message={errorMessage} />\n      <Notification status=\"success\" message={successMessage} />\n      <Filter searchTerm={searchTerm} onChange={handleSearchTermChange} />\n      <h3>add a new</h3>\n      <PersonForm\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n        onSubmit={handleAddPerson}\n      />\n      <h3>Numbers</h3>\n      <Persons\n        handleDelete={handleDelete}\n        persons={persons.filter((person) =>\n          person.name.toLowerCase().includes(searchTerm.toLowerCase())\n        )}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}